// Code generated by go-bindata.
// sources:
// testnet/delegates.json
// mainnet/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4b\x6f\x9b\x4c\x18\x85\xf7\xfe\x15\x23\xb6\xe4\x73\x66\x86\x81\x19\x23\x65\xc1\x70\xb3\x13\xdf\x2f\x21\xf6\xa7\x2a\xb2\x01\x1b\x0c\x06\x02\xe3\x00\xad\xf2\xdf\x2b\x5a\x67\x97\xaa\x9b\x6e\xdf\xa3\xf3\x4a\xe7\x79\xfe\xef\x01\xf0\xa3\x07\x00\x00\x52\xb6\xbf\x84\x92\x0e\x24\x11\x56\xe2\x3f\x88\xa4\xbb\xdf\xe7\x7d\x10\x94\x61\x55\x75\x09\x6c\x0c\xd3\x50\x19\x43\x50\xc3\x0e\xc2\x1a\x57\x2c\x93\x5a\xc8\x30\x31\x33\x89\x35\x20\x1c\x6b\x03\x4a\x4d\x88\x9c\xcf\x72\x71\x3d\xbc\x26\x61\xdb\x95\xf9\x9c\x3b\xdb\xa1\xd2\xca\x1b\x65\x59\xae\xa6\xde\xa1\x7e\x6b\xf2\x36\xc4\x2f\xb6\x30\xf1\xee\x69\x1d\xb1\xab\xdf\xd6\x8b\x05\xbb\x3e\xcf\x37\x51\x7a\xa1\x79\x11\x45\x01\x44\x0d\x3f\x25\x2e\x7f\x4c\x57\x70\x14\x24\xa7\x67\x95\xe6\xdb\x55\x3d\x0f\x5b\x77\x99\x8c\x86\x93\xc9\x83\xae\xeb\xe9\xf2\x62\x9b\xa5\xdf\x86\x71\xf3\x78\x6e\x82\xe4\x29\xe5\x3b\xcf\x1e\xb7\x95\x71\x3e\x28\x5c\x20\x35\xbb\x77\xfd\xe6\x3a\xbe\x50\xa8\xc9\xd1\x59\x9d\xca\x93\xe0\x7e\x1e\xe1\x7a\xb3\x2b\x0a\x2a\x2c\x63\xbf\x3e\x9e\x9c\x43\xb8\xf0\x2b\x7b\xe8\xad\xdd\xc1\x2c\x9d\xc2\xda\x7e\xf8\x5c\xf1\x9e\x8b\x38\x3b\xbd\x16\x79\x1d\x96\x92\x0e\x10\x84\xb7\x20\x0b\x45\x9d\x97\xc9\x6b\xc7\x48\xd2\x6f\x20\x01\x90\xe2\xa2\x5b\x8c\x94\x3e\x46\xa4\xaf\x6a\x7d\xa4\xd1\xdb\xaf\x8e\x49\x5e\x0a\x49\x07\x4c\xa3\xf0\xd7\xe9\xa3\x07\xc0\xc7\xdd\x9f\x3c\xe0\x2f\x3d\x30\x4e\x0c\xc3\x51\x20\x37\x4d\x1b\x2a\x54\x25\x64\xc0\x09\xc2\xcc\x56\x6d\xcd\x72\x34\xaa\x20\xcd\x32\x6d\x64\x7f\xe5\x81\x7b\xf2\xc8\x9b\x1e\x9f\x65\xb5\x59\x88\x34\x1e\x31\xbb\x08\x94\x7a\xc2\x08\xf7\xaf\xf8\x65\xf9\x36\x4b\xc7\xfe\xd0\x90\xeb\x36\x75\xbd\x5d\xbe\x89\x5f\xb6\x07\x3e\x9a\x2d\x6b\x61\xf2\x85\xe5\x8d\x2f\x0b\x82\x7c\x6f\xc3\xf2\xa0\x7e\x17\xfc\x48\x0f\xe3\xc4\xcb\x49\xd5\x79\x58\x0f\xef\xdd\x37\x51\xfa\xb9\xfc\xdd\x0f\x62\x9b\x0e\x7d\xec\xef\x52\x94\x6c\x2b\x94\xcf\xcb\xa3\xe1\x91\x3d\x69\xdc\xcb\x31\x9b\xa8\xfc\x69\x72\xb6\x34\x24\xac\x6c\x59\xb0\x8d\x17\x9f\x32\x42\xaa\x6d\x4c\xea\xfd\x20\xf1\x7c\x73\x1f\xbd\x3b\xb3\x95\x0c\xdd\x95\x73\x32\xfe\x91\x07\x84\x51\x1f\x31\xed\x2f\x22\x7a\xdf\x7e\x06\x00\x00\xff\xff\x70\xc1\x94\x5d\x13\x03\x00\x00")

func testnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_testnetDelegatesJson,
		"testnet/delegates.json",
	)
}

func testnetDelegatesJson() (*asset, error) {
	bytes, err := testnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testnet/delegates.json", size: 787, mode: os.FileMode(420), modTime: time.Unix(1641250181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x5d\x6f\xa2\x40\x18\x85\xef\xfd\x15\x84\xdb\x76\x75\x86\x61\x86\x81\xa4\x17\x80\x33\x22\x22\x8a\x8a\x5f\x9b\x4d\x23\x0a\x94\x8a\x48\xf9\x54\x37\xfd\xef\x1b\x77\xdb\xbb\x6e\xf6\x66\x6f\xdf\x93\xf3\x26\xe7\x79\xbe\x77\x04\xe1\x67\x47\x10\x04\x41\xcc\x76\xa7\x50\xd4\x04\xf1\xb4\x4b\xb2\x6f\x00\x8a\x8f\x7f\xce\xbb\xc3\xa1\x08\xcb\xf2\x9e\x80\x8b\x6e\xea\x98\x52\x08\x88\xc4\xa1\x44\x0c\xd4\x37\x95\x3e\xd4\x4d\x89\x9a\x72\x5f\x95\x0d\x89\xa8\x8a\x62\x02\xc8\x3f\xcb\x79\x1d\x3c\x1f\xc3\xeb\xbd\x6c\xd8\x0c\x99\x2c\x21\xeb\x3a\x81\xf3\x49\x9d\xcf\x6d\x3e\x00\x37\x99\x36\xf4\x21\x2d\x22\x6a\xf9\x06\xe2\x6c\xff\xb6\x0b\xc0\x7e\x71\x93\xb2\x5e\x0b\x73\x35\xc2\x83\x60\x31\xd3\xf1\xfa\xad\x4d\x79\xb6\x5e\xb3\xe5\x88\xc1\xd1\xc1\x6b\xe1\x68\xb1\xb9\x0c\x4f\x39\x29\x9f\x34\x4d\x8b\x9a\xa4\xc8\xa6\xcb\x78\xe3\x55\xfe\x1b\xab\x4e\x0e\x2f\xfd\x5a\x8f\x5c\x79\x3a\xf6\xb3\x66\x99\x39\x4b\x35\x29\x00\xb2\x47\xab\xad\x9b\x4a\xe8\x42\xac\x19\x0e\x2c\x89\x9d\x86\xfb\x62\x51\x2d\xcb\x01\x06\x41\x4f\x75\x7c\x7f\x8e\xbd\xeb\x6b\x32\xf0\x6f\x75\xcf\x69\xd9\xd3\xe7\x8a\xe6\x5c\x25\x59\xfc\x9c\x9f\xdb\xb0\x10\x35\x01\x02\xf0\x11\x64\x61\xd5\x9e\x8b\xe3\xf3\x9d\x91\xa8\x7d\x80\x14\x04\x31\xc9\xef\x8b\x21\xea\x4a\x50\xee\x42\x44\xba\x50\xa1\x1f\xcf\xee\x50\xce\x45\x25\x6a\x02\x25\x0a\xf8\x7d\x7a\xef\x08\xc2\xfb\xe3\xdf\x44\x48\x5f\x8a\xa0\x86\xac\xeb\x1c\x01\xc3\x34\x19\x40\x0a\x96\x65\xd5\x90\xa1\x44\x19\x66\xa4\xcf\x89\x82\x20\xe9\x9b\x0c\xb2\xaf\x44\x8c\x5e\x47\xf5\x81\xab\x8a\xa1\x4c\xa3\x38\xde\x9c\xd2\xa4\xd9\x05\x7d\x6a\x5d\x87\xab\x7c\x35\x05\x76\xeb\x2f\xf0\xd8\xaa\xa9\x37\xac\xb6\x0e\xac\x52\x5c\xa3\xc3\x64\xeb\x61\xbf\xc5\xb9\x9b\x38\xf5\x66\x55\xda\xac\x18\x1e\x79\xc3\xa3\xd5\x3e\xb5\xc2\x8a\xe9\x8c\xdd\x45\xa4\x51\x23\x3b\x67\xfd\x12\xc1\x4d\xf3\x30\x55\xb6\x6e\xbc\x9f\x3f\x60\x98\x2e\xdc\x89\xdb\xf4\x2c\x37\x94\x31\x27\xf1\xac\xac\x77\xd3\xa3\xf2\x32\xbb\x85\x4a\x30\x33\x5a\x74\xe8\xf1\xe5\xd8\xc9\xa4\x2b\xcc\x91\xa7\xca\xf6\x79\xfc\xfa\x42\xd6\x3d\x6f\xc8\x27\x36\x89\xbd\xff\x23\x42\xea\x42\x4c\xbb\x50\x05\xff\x10\xd1\xf9\xf1\x2b\x00\x00\xff\xff\x12\x1f\x37\x72\x14\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 788, mode: os.FileMode(420), modTime: time.Unix(1641318938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testnet/delegates.json": testnetDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"testnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{testnetDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

