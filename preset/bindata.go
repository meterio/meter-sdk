// Code generated by go-bindata. DO NOT EDIT.
// sources:
// testnet/delegates.json
// mainnet/delegates.json
package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcb\x92\x9a\x40\x18\x05\xe0\xbd\x4f\x41\xb1\xed\x19\xa5\x9b\x4b\x03\x55\xb3\x68\x68\xbc\xa1\x8e\xa2\x28\x26\x95\x9a\xe2\xd2\x30\x8a\x17\x6c\x10\xd4\xd4\xbc\x7b\xca\x64\x26\xab\x4c\x92\xed\x7f\xea\x5f\x9c\xf3\x7d\x6d\x09\xc2\xf7\x96\x20\x08\x82\x78\x08\xf7\x4c\x34\x05\xb1\x4c\xf2\xc7\x88\x55\xe1\x23\x94\xc5\x87\x5f\x51\x98\x24\x9c\x95\xe5\x3d\x95\x2e\xc4\x26\xaa\xae\x43\x49\x43\x5d\x88\x34\x4b\xa6\x36\xa6\x90\xd8\x48\xb7\x15\x6a\x28\x16\xd2\x0c\x8c\x6d\x09\x76\x3f\x9e\x8b\x73\xf4\x92\xb3\xeb\xfd\xd9\x1a\x04\x21\x57\x80\x34\x21\x13\xa7\xbf\x3e\xba\xb3\x64\x89\xd3\x9d\xb2\x1f\xca\xa4\x7a\x5e\x0f\x57\x52\x1a\x94\x0d\xe3\x67\xce\xc3\x5b\xae\x39\xea\x76\xd9\xdf\x45\x81\xbd\x98\x4c\x7d\x29\xa3\x1a\xb8\x5d\x21\x85\x60\x0b\x29\xf7\x59\xbc\x90\x8a\xde\x60\x1a\x5f\x91\xfe\x64\x9a\x66\xe0\x72\x77\x1c\x34\x07\xbe\x5c\x53\xef\x9a\xd8\x32\x41\x99\x3b\xb7\x59\x1e\x64\xa5\x97\xba\x64\xd7\x3b\xd3\x93\x75\xe9\x80\x51\x16\x67\x0c\xc4\xd3\x2d\xba\x1c\x7a\xde\x85\x0d\x07\xfd\x01\x19\x03\x5f\xba\xd6\xb1\xbe\x2a\x96\xea\xd4\x5f\x73\xcf\x73\x0e\xee\xf6\xd6\x38\x4f\x1f\x2d\xea\x63\xb5\x39\x64\x2f\xc5\xb1\x61\x5c\x34\x05\x28\x4b\xef\xc1\x81\x55\xcd\x91\xe7\x2f\xf7\x8d\x44\xf3\x7d\x4c\x41\x10\x37\xc5\xbd\x31\x94\xdb\x08\xa2\x36\xd4\xd5\xf6\xef\x39\xef\x9b\x1c\x79\x25\x9a\x82\xae\x61\xe9\xe7\xe9\xad\x25\x08\x6f\x0f\x7f\xb3\xf8\x04\x43\xb7\x14\x42\xba\xb2\x64\xd9\xb6\x23\xc9\x58\x55\x14\xc3\x52\x20\xd2\x1d\xd5\xd1\x68\x57\xc3\x32\xd4\xa8\xed\x40\xe7\x8f\x18\x7d\x8e\x07\xe9\x6a\x06\x48\xb8\x2f\x6c\x35\xc8\x10\xc5\x65\x67\x31\x02\xab\xb4\x66\x0a\xa8\x16\xbd\x2e\x99\x18\x1b\x00\x96\xaf\xf3\x15\x1c\xc6\x63\x32\x7a\x05\x47\xac\x45\xe5\x9c\xe4\x3d\x9f\xcf\x9f\x37\x1a\x3d\x21\xbd\xf6\x13\x8a\xbd\xaa\xb3\x89\x26\xab\xdb\xfa\x8e\xb1\x37\x92\xed\x0e\xd4\x3e\xf6\xad\x41\x0a\x2b\x56\xcc\xaa\x91\x33\x3e\xc5\x51\x19\xe2\xb9\x35\x6b\xaa\x84\x71\xbc\xbd\xc8\xde\x2b\x82\xb5\xe1\xc1\x51\x9d\x22\x7f\xd1\xef\xf2\x4e\x16\xae\xb5\x33\xdb\x9f\x8c\xba\x6c\xf2\xf1\x97\xa5\x3c\x51\x0c\xc5\x1d\x3b\xb7\x68\x93\x7d\x8e\xa1\xfc\x1f\x86\xdc\x86\x6d\xb5\x0d\xff\x09\xd1\xfa\xf6\x23\x00\x00\xff\xff\x24\x85\xaf\x6f\x17\x03\x00\x00")

func testnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_testnetDelegatesJson,
		"testnet/delegates.json",
	)
}

func testnetDelegatesJson() (*asset, error) {
	bytes, err := testnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testnet/delegates.json", size: 791, mode: os.FileMode(420), modTime: time.Unix(1641894953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\xcb\x6e\x9b\x40\x14\x06\xe0\xbd\x9f\x62\xc4\x96\xd4\x99\x19\x06\x66\x8c\x94\x05\xc3\xcd\x4e\x7c\xbf\x84\xd8\x55\x15\x61\xc0\x06\x73\x0d\xe0\x00\xad\xf2\xee\x15\x6d\xb2\x4b\x54\x75\x7b\x8e\xce\x91\xfe\xff\xfb\x3e\x00\xe0\xd7\x00\x00\x00\x84\xcc\x4d\x03\x41\x05\x42\xea\x46\xd9\x37\x88\x84\x9b\xbf\x63\xd7\xf7\xcb\xa0\xaa\xfa\x0d\x6c\x35\x5d\x93\x19\x43\x50\xc1\x16\xc2\x0a\x97\x0c\x9d\x1a\x48\xd3\x31\xd3\x89\x31\x22\x1c\x2b\x23\x4a\x75\x88\xac\x8f\xe3\xe2\x7a\x7c\x8e\x83\xae\x3f\xe6\x4b\x6e\xed\xc7\x52\x27\xee\xa4\x75\xb9\x99\x3b\xc7\xe6\xa5\xcd\xbb\x00\x3f\x99\xb5\x8e\x0f\x0f\xdb\x90\x5d\xbd\xae\x59\xad\xd8\xf5\x71\xb9\x0b\x93\x94\xe6\x45\x18\xfa\x10\xb5\xfc\x1c\xdb\xfc\x3e\xd9\xc0\x89\x1f\x9f\x1f\x65\x9a\xef\x37\xcd\x32\xe8\xec\x75\x3c\x19\xcf\x66\x77\xaa\xaa\x26\xeb\xd4\xd4\x4b\xaf\x0b\xa2\xf6\xfe\xd2\xfa\xf1\x43\xc2\x0f\x8e\x39\xed\x2a\xed\x72\x94\x78\x8d\xe4\xec\xd6\xf6\xda\xeb\x34\xa5\x50\x11\xc3\x8b\x3c\x17\x67\xfe\xed\x32\xc4\xcd\xee\x50\x14\xb4\x36\x34\x77\x7b\x3a\x5b\xc7\x60\xe5\x55\xe6\xd8\xd9\xda\xa3\x45\x32\x87\x8d\x79\xf7\x91\xe2\x35\xaf\xa3\xec\xfc\x5c\xe4\x4d\x50\x0a\x2a\x40\x08\xbe\x2f\xb2\xa0\x6e\xf2\x32\x7e\xee\x3b\x12\xd4\xf7\x22\x01\x10\xa2\xa2\x4f\x8c\xa4\x21\x46\x64\x28\x2b\x43\xa4\xd0\xf7\x5f\x7d\x27\x79\x59\x0b\x2a\x60\x0a\x85\x7f\x46\x6f\x03\x00\xde\x6e\xbe\x72\xc0\x9f\x3a\x30\x4e\x34\xcd\x92\x20\xd7\x75\x13\x4a\x54\x26\x64\xc4\x09\xc2\xcc\x94\x4d\xc5\xb0\x14\x2a\x21\xc5\xd0\x4d\x64\x7e\xe6\xc0\x1d\x71\xe2\xcc\x4f\x8f\xa2\xdc\xae\xea\x24\x9a\x30\xb3\xf0\xa5\x66\xc6\x08\xf7\xae\xf8\x69\xfd\xb2\x48\xa6\xde\x58\x13\x9b\x2e\xb1\x9d\x43\xbe\x8b\x9e\xf6\x47\x3e\x59\xac\x9b\x5a\xe7\x2b\xc3\x99\xa6\x2b\x82\x3c\x67\xc7\x72\xbf\x79\xad\xf9\x89\x1e\xa7\xb1\x93\x93\xaa\x77\xd8\x8e\x6f\xed\x97\xba\xf4\x72\xf1\xa7\xe7\x47\x26\x1d\x7b\xd8\x3b\x24\x28\xde\x57\x28\x5f\x96\x27\xcd\x21\x2e\x69\xed\xf4\x94\xcd\x64\xfe\x30\xbb\x18\x0a\xaa\x8d\x6c\x5d\xb0\x9d\x13\x9d\x33\x42\xaa\x7d\x44\x1a\x77\x14\x3b\x9e\xee\x86\xaf\xd6\x62\x23\x42\x7b\x63\x9d\xb5\x2f\x1d\xf0\x7f\x39\x20\x8c\x86\x88\x29\xff\x80\x18\xfc\xf8\x1d\x00\x00\xff\xff\xfc\xa0\x7e\x84\x13\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 787, mode: os.FileMode(420), modTime: time.Unix(1641874617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testnet/delegates.json": testnetDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"testnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{testnetDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

