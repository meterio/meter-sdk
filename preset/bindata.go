// Code generated by go-bindata.
// sources:
// testnet/delegates.json
// mainnet/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4b\x6f\x9b\x4c\x18\x85\xf7\xfe\x15\x23\xb6\xe4\x73\x66\x86\x81\x19\x23\x65\xc1\x70\xb3\x13\xdf\x2f\x21\xf6\xa7\x2a\xb2\x01\x1b\x0c\x06\x02\xe3\x00\xad\xf2\xdf\x2b\x5a\x67\x97\xaa\x9b\x6e\xdf\xa3\xf3\x4a\xe7\x79\xfe\xef\x01\xf0\xa3\x07\x00\x00\x52\xb6\xbf\x84\x92\x0e\x24\x11\x56\xe2\x3f\x88\xa4\xbb\xdf\xe7\x7d\x10\x94\x61\x55\x75\x09\x6c\x0c\xd3\x50\x19\x43\x50\xc3\x0e\xc2\x1a\x57\x2c\x93\x5a\xc8\x30\x31\x33\x89\x35\x20\x1c\x6b\x03\x4a\x4d\x88\x9c\xcf\x72\x71\x3d\xbc\x26\x61\xdb\x95\xf9\x9c\x3b\xdb\xa1\xd2\xca\x1b\x65\x59\xae\xa6\xde\xa1\x7e\x6b\xf2\x36\xc4\x2f\xb6\x30\xf1\xee\x69\x1d\xb1\xab\xdf\xd6\x8b\x05\xbb\x3e\xcf\x37\x51\x7a\xa1\x79\x11\x45\x01\x44\x0d\x3f\x25\x2e\x7f\x4c\x57\x70\x14\x24\xa7\x67\x95\xe6\xdb\x55\x3d\x0f\x5b\x77\x99\x8c\x86\x93\xc9\x83\xae\xeb\xe9\xf2\x62\x9b\xa5\xdf\x86\x71\xf3\x78\x6e\x82\xe4\x29\xe5\x3b\xcf\x1e\xb7\x95\x71\x3e\x28\x5c\x20\x35\xbb\x77\xfd\xe6\x3a\xbe\x50\xa8\xc9\xd1\x59\x9d\xca\x93\xe0\x7e\x1e\xe1\x7a\xb3\x2b\x0a\x2a\x2c\x63\xbf\x3e\x9e\x9c\x43\xb8\xf0\x2b\x7b\xe8\xad\xdd\xc1\x2c\x9d\xc2\xda\x7e\xf8\x5c\xf1\x9e\x8b\x38\x3b\xbd\x16\x79\x1d\x96\x92\x0e\x10\x84\xb7\x20\x0b\x45\x9d\x97\xc9\x6b\xc7\x48\xd2\x6f\x20\x01\x90\xe2\xa2\x5b\x8c\x94\x3e\x46\xa4\xaf\x6a\x7d\xa4\xd1\xdb\xaf\x8e\x49\x5e\x0a\x49\x07\x4c\xa3\xf0\xd7\xe9\xa3\x07\xc0\xc7\xdd\x9f\x3c\xe0\x2f\x3d\x30\x4e\x0c\xc3\x51\x20\x37\x4d\x1b\x2a\x54\x25\x64\xc0\x09\xc2\xcc\x56\x6d\xcd\x72\x34\xaa\x20\xcd\x32\x6d\x64\x7f\xe5\x81\x7b\xf2\xc8\x9b\x1e\x9f\x65\xb5\x59\x88\x34\x1e\x31\xbb\x08\x94\x7a\xc2\x08\xf7\xaf\xf8\x65\xf9\x36\x4b\xc7\xfe\xd0\x90\xeb\x36\x75\xbd\x5d\xbe\x89\x5f\xb6\x07\x3e\x9a\x2d\x6b\x61\xf2\x85\xe5\x8d\x2f\x0b\x82\x7c\x6f\xc3\xf2\xa0\x7e\x17\xfc\x48\x0f\xe3\xc4\xcb\x49\xd5\x79\x58\x0f\xef\xdd\x37\x51\xfa\xb9\xfc\xdd\x0f\x62\x9b\x0e\x7d\xec\xef\x52\x94\x6c\x2b\x94\xcf\xcb\xa3\xe1\x91\x3d\x69\xdc\xcb\x31\x9b\xa8\xfc\x69\x72\xb6\x34\x24\xac\x6c\x59\xb0\x8d\x17\x9f\x32\x42\xaa\x6d\x4c\xea\xfd\x20\xf1\x7c\x73\x1f\xbd\x3b\xb3\x95\x0c\xdd\x95\x73\x32\xfe\x91\x07\x84\x51\x1f\x31\xed\x2f\x22\x7a\xdf\x7e\x06\x00\x00\xff\xff\x70\xc1\x94\x5d\x13\x03\x00\x00")

func testnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_testnetDelegatesJson,
		"testnet/delegates.json",
	)
}

func testnetDelegatesJson() (*asset, error) {
	bytes, err := testnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testnet/delegates.json", size: 787, mode: os.FileMode(420), modTime: time.Unix(1640801705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc9\x6e\xda\x50\x18\x85\xf7\x3c\xc5\x95\xb7\xa4\x70\x27\x5f\x0f\x52\x16\x9e\x81\x18\x62\x03\x4e\xc0\x55\x15\x19\xb0\xc1\x01\xcf\x80\x6d\xaa\xbc\x7b\xe5\x96\xec\x52\x75\xd3\xed\x7f\x74\x7e\xe9\x7c\xdf\xf7\x1e\x00\x3f\x7b\x00\x00\xc0\xa5\x41\x12\x72\x32\xe0\x92\x20\x4e\xbf\x41\xc4\x3d\xfc\x39\x07\xbb\x5d\x19\x56\x55\x97\xc0\x46\xd1\x14\x5e\x14\x11\x64\xd8\x44\x98\xa9\x44\xd7\x04\x1d\x29\x1a\x16\x35\xaa\x4b\x54\xc5\x4c\x12\x04\x0d\x22\xf3\xb3\x9c\x5f\x36\x6f\xc7\xb0\xed\xca\xea\x94\x96\x12\xec\x5b\x6d\x61\x8c\xd2\xa1\x18\x32\xd5\xdb\xf3\xe4\x79\xd2\xf8\x02\x59\xd4\x96\x6d\xbb\xde\x5a\xec\xfb\x75\x5b\x1d\xdd\xa9\x7f\x3e\x5e\x8b\xc6\x9d\xcd\xe0\x76\x9c\x9e\xa6\xd1\x81\x38\xd1\x7e\xb9\xb4\x5e\x8a\x7c\xef\x19\xeb\xab\x3d\xb6\xa2\xa1\x55\xd4\xfc\xf6\x51\x96\xe5\x6d\xb2\xe3\xb7\x4e\x92\xcd\x91\xa6\x9e\x62\x2b\xaa\x60\x21\x59\x26\x7e\x72\xd3\x66\xda\xd2\xb6\x5f\xa6\x7e\xeb\xb1\xd0\xe6\x2f\xab\xdb\xf4\x10\x84\xe9\x8a\xed\x94\xa7\x0b\x49\xb4\x7a\xb3\x6e\x90\x54\xb0\x23\xa9\x87\xd1\xfb\x9c\x04\xb1\xea\x8d\x5d\x6d\xe7\xf5\x5f\x5d\xe5\xf1\x73\xc5\x35\x3b\xc7\xe9\xfe\x2d\xcf\xea\xb0\xe4\x64\x80\x20\xbc\x07\x69\x78\xae\xb3\xf2\xf8\xd6\x31\xe2\xe4\x3b\x48\x00\xb8\x38\xef\x16\x23\x32\xc0\x3c\x1a\x20\x2c\x0d\x08\xbe\xff\xea\x98\x64\xe5\x99\x93\x81\xc8\x04\xf8\xfb\xf4\xd1\x03\xe0\xe3\xe1\x6f\x1e\xf0\x97\x1e\x44\x95\x2a\x8a\x49\xa0\xaa\x69\x06\x24\x02\x4f\xa9\xa4\x52\x84\x45\x83\x37\x98\x6e\x32\x81\x20\xa6\x6b\x06\x32\xbe\xf2\xf0\x5c\x18\xa3\x6b\x74\x98\x2f\x33\x88\x74\xd1\x71\xa7\xaf\xf9\x12\xae\xd4\xec\x4a\x23\x23\xaf\x86\x81\xde\xfa\xe3\xc5\x53\x36\x5a\x07\xbb\xc0\xcb\x27\x81\x90\x2b\xc6\x32\xaf\x54\x73\x4c\xd8\x68\x26\x62\x9c\x2e\xb4\xeb\xb0\xf1\x5f\x7c\x41\x3a\xdd\x5c\x73\x5f\x3a\xcc\x81\x9d\x87\x39\x65\x34\x31\x92\xe2\xbc\x5c\xc1\x67\xe7\x70\x78\xaf\x48\x3f\x54\x4e\xcd\x29\x9b\xd0\x0d\x3f\x37\x2a\x65\xb6\xc1\xd2\x42\x6c\xb6\x28\xba\xd8\xce\xe5\xf6\x92\x13\x7b\x81\x61\x76\xb3\x2f\x0b\x91\x0e\x05\x65\x72\x7c\x1f\x15\x99\x6b\x09\x8d\x74\xa3\x71\x11\x07\x5b\x7e\xff\x5f\x3c\x20\x3c\x40\x54\x18\x20\x84\xfe\x21\xa2\xf7\xa3\xf7\x2b\x00\x00\xff\xff\x65\xd3\x03\x37\x14\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 788, mode: os.FileMode(420), modTime: time.Unix(1640801942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testnet/delegates.json": testnetDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"testnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{testnetDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

