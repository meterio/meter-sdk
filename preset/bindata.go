// Code generated by go-bindata. DO NOT EDIT.
// sources:
// shoal/delegates.json
// mainnet/delegates.json
package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4b\x6f\x9b\x4c\x18\x85\xf7\xfe\x15\x23\xb6\xe4\x73\x66\x86\x81\x19\x23\x65\xc1\x70\xb3\x13\xdf\x2f\x21\xf6\xa7\x2a\xc2\x80\x0d\x06\x33\x04\x70\x80\x56\xf9\xef\x95\x5b\x67\x97\xaa\x9b\x6e\xdf\xa3\xf3\x4a\xe7\x79\xfe\xef\x01\xf0\xa3\x07\x00\x00\x52\xee\x9f\x23\x49\x07\x52\x15\x0b\x3f\xfb\x0f\x22\xe9\xee\xf7\xdd\x0f\xc3\x32\xaa\xaa\x6b\x04\x5b\xc3\x34\x54\xc6\x10\xd4\xb0\x83\xb0\xc6\x15\xcb\xa4\x16\x32\x4c\xcc\x4c\x62\x0d\x08\xc7\xda\x80\x52\x13\x22\xe7\xb3\x5c\x5c\xf6\xaf\x69\xd4\x5d\xcb\x7c\xce\x9d\xed\x50\xe9\xe4\x8d\xb2\x2c\x57\x53\x6f\xdf\xbc\xb5\xa2\x8b\xf0\x8b\x5d\x9b\x78\xf7\xb4\x8e\xd9\x25\xe8\x9a\xc5\x82\x5d\x9e\xe7\x9b\x38\x3b\x53\x51\xc4\x71\x08\x51\xcb\x8f\xa9\xcb\x1f\xb3\x15\x1c\x85\xe9\xf1\x59\xa5\x62\xbb\x6a\xe6\x51\xe7\x2e\xd3\xd1\x70\x32\x79\xd0\x75\x3d\x5b\x9e\x6d\xb3\x0c\xba\x28\x69\x1f\x4f\x6d\x98\x3e\x65\x7c\xe7\xd9\xe3\xae\x32\x4e\x7b\x85\xd7\x48\xcd\xef\xdd\xa0\xbd\x8c\xcf\x14\x6a\x72\x7c\x52\xa7\xf2\x24\xbc\x9f\xc7\xb8\xd9\xec\x8a\x82\xd6\x96\xe1\xaf\x0f\x47\x67\x1f\x2d\x82\xca\x1e\x7a\x6b\x77\x30\xcb\xa6\xb0\xb1\x1f\x3e\x57\xbc\x8b\x3a\xc9\x8f\xaf\x85\x68\xa2\x52\xd2\x01\x82\xf0\x16\xe4\x51\xdd\x88\x32\x7d\xbd\x32\x92\xf4\x1b\x49\x00\xa4\xa4\xb8\x2e\x46\x4a\x1f\x23\xd2\x57\xb5\x3e\xd2\xe8\xed\xd7\x95\x89\x28\x6b\x49\x07\x4c\xa3\xf0\xd7\xe9\xa3\x07\xc0\xc7\xdd\x1f\x45\xe0\x2f\x45\x30\x4e\x0c\xc3\x51\x20\x37\x4d\x1b\x2a\x54\x25\x64\xc0\x09\xc2\xcc\x56\x6d\xcd\x72\x34\xaa\x20\xcd\x32\x6d\x64\x7f\x25\x82\x7b\xf2\xc8\x9b\x1e\x9e\x65\xb5\x5d\xd4\x59\x32\x62\x76\x11\x2a\xcd\x84\x11\x1e\x5c\xf0\xcb\xf2\x6d\x96\x8d\x83\xa1\x21\x37\x5d\xe6\x7a\x3b\xb1\x49\x5e\xb6\x7b\x3e\x9a\x2d\x9b\xda\xe4\x0b\xcb\x1b\x9f\x17\x04\x05\xde\x86\x89\xb0\x79\xaf\xf9\x81\xee\xc7\xa9\x27\x48\x75\x15\xb1\x1e\xde\xbb\x6f\x75\x19\x08\xf9\x7b\x10\x26\x36\x1d\x06\x38\xd8\x65\x28\xdd\x56\x48\xcc\xcb\x83\xe1\x11\x9f\xb4\xee\xf9\x90\x4f\x54\xfe\x34\x39\x59\x1a\xaa\xad\x7c\x59\xb0\x8d\x97\x1c\x73\x42\xaa\x6d\x42\x1a\x7f\x90\x7a\x81\xe9\xc7\xef\xce\x6c\x25\x43\x77\xe5\x1c\x8d\x7f\x24\x02\x61\xd4\x47\x4c\xfb\x8b\x89\xde\xb7\x9f\x01\x00\x00\xff\xff\x9f\xd0\xda\x04\x15\x03\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 789, mode: os.FileMode(420), modTime: time.Unix(1640739304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4b\x6f\x9b\x4c\x18\x85\xf7\xfe\x15\x23\xb6\xe4\x73\x66\x86\x81\x19\x23\x65\xc1\x70\xb3\x13\xdf\x2f\x21\xf6\xa7\x2a\xc2\x80\x0d\xe6\x1a\xc0\x01\x5a\xe5\xbf\x57\xb4\xce\x2e\x55\x37\xdd\xbe\x47\xe7\x95\xce\xf3\xfc\x3f\x00\xe0\xc7\x00\x00\x00\x84\xcc\x4d\x03\x41\x05\x42\xea\x46\xd9\x7f\x10\x09\x77\xbf\xcf\xae\xef\x97\x41\x55\xf5\x09\x6c\x35\x5d\x93\x19\x43\x50\xc1\x16\xc2\x0a\x97\x0c\x9d\x1a\x48\xd3\x31\xd3\x89\x31\x22\x1c\x2b\x23\x4a\x75\x88\xac\xcf\x72\x71\x3d\xbe\xc6\x41\xd7\x97\xf9\x92\x5b\xfb\xb1\xd4\x89\x3b\x69\x5d\x6e\xe6\xce\xb1\x79\x6b\xf3\x2e\xc0\x2f\x66\xad\xe3\xc3\xd3\x36\x64\x57\xaf\x6b\x56\x2b\x76\x7d\x5e\xee\xc2\x24\xa5\x79\x11\x86\x3e\x44\x2d\x3f\xc7\x36\x7f\x4c\x36\x70\xe2\xc7\xe7\x67\x99\xe6\xfb\x4d\xb3\x0c\x3a\x7b\x1d\x4f\xc6\xb3\xd9\x83\xaa\xaa\xc9\x3a\x35\xf5\xd2\xeb\x82\xa8\x7d\xbc\xb4\x7e\xfc\x94\xf0\x83\x63\x4e\xbb\x4a\xbb\x1c\x25\x5e\x23\x39\xbb\xb7\xbd\xf6\x3a\x4d\x29\x54\xc4\xf0\x22\xcf\xc5\x99\x7f\xbf\x0c\x71\xb3\x3b\x14\x05\xad\x0d\xcd\xdd\x9e\xce\xd6\x31\x58\x79\x95\x39\x76\xb6\xf6\x68\x91\xcc\x61\x63\x3e\x7c\xae\x78\xcf\xeb\x28\x3b\xbf\x16\x79\x13\x94\x82\x0a\x10\x84\xb7\x20\x0b\xea\x26\x2f\xe3\xd7\x9e\x91\xa0\xde\x40\x02\x20\x44\x45\xbf\x18\x49\x43\x8c\xc8\x50\x56\x86\x48\xa1\xb7\x5f\x3d\x93\xbc\xac\x05\x15\x30\x85\xc2\x5f\xa7\x8f\x01\x00\x1f\x77\x7f\xf2\x80\xbf\xf4\xc0\x38\xd1\x34\x4b\x82\x5c\xd7\x4d\x28\x51\x99\x90\x11\x27\x08\x33\x53\x36\x15\xc3\x52\xa8\x84\x14\x43\x37\x91\xf9\x95\x07\xee\x88\x13\x67\x7e\x7a\x16\xe5\x76\x55\x27\xd1\x84\x99\x85\x2f\x35\x33\x46\xb8\x77\xc5\x2f\xeb\xb7\x45\x32\xf5\xc6\x9a\xd8\x74\x89\xed\x1c\xf2\x5d\xf4\xb2\x3f\xf2\xc9\x62\xdd\xd4\x3a\x5f\x19\xce\x34\x5d\x11\xe4\x39\x3b\x96\xfb\xcd\x7b\xcd\x4f\xf4\x38\x8d\x9d\x9c\x54\xbd\x87\xed\xf8\xde\x7e\xab\x4b\x2f\x17\xbf\x7b\x7e\x64\xd2\xb1\x87\xbd\x43\x82\xe2\x7d\x85\xf2\x65\x79\xd2\x1c\xe2\x92\xd6\x4e\x4f\xd9\x4c\xe6\x4f\xb3\x8b\xa1\xa0\xda\xc8\xd6\x05\xdb\x39\xd1\x39\x23\xa4\xda\x47\xa4\x71\x47\xb1\xe3\xe9\x6e\xf8\x6e\x2d\x36\x22\xb4\x37\xd6\x59\xfb\x47\x1e\x10\x46\x43\xc4\x94\xbf\x88\x18\x7c\x1b\xfc\x0c\x00\x00\xff\xff\x11\x78\xe8\x0d\x14\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 788, mode: os.FileMode(420), modTime: time.Unix(1640319749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

