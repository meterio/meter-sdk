// Code generated by go-bindata. DO NOT EDIT.
// sources:
// testnet/delegates.json
// mainnet/delegates.json
package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x5b\x6f\xa2\x5a\x14\x07\xf0\x77\x3f\xc5\x0e\xaf\xed\xd1\x7d\x63\x73\x49\xfa\x00\x7b\x03\xe2\xc1\x5a\xa8\x56\xe5\xe4\xa4\x41\xdc\x5a\x11\xc1\x0b\x0a\x38\xe9\x77\x9f\x38\xd3\xbe\xb5\x99\x79\x5d\x2b\x6b\x25\xff\xff\xef\xbf\x0e\x00\x3f\x3a\x00\x00\xa0\x14\xc9\x4e\x2a\x26\x50\x2a\x79\xaa\xfe\x81\x48\xb9\xff\x3d\x4e\x96\xcb\xa3\x3c\x9d\x6e\x1b\xd8\x58\xdc\x52\x75\x1d\x41\x86\x5d\x84\x99\x4d\x04\xd7\x04\xb2\x38\xd6\x39\x15\x06\xb5\x31\x33\x34\x8d\x43\xe4\x7e\x1e\xef\xcf\x8b\xd7\xad\x6c\x6f\xc7\xb6\x98\x13\xe3\xc0\xdb\x54\x84\x03\x6b\xe3\x43\x12\xed\x17\x2c\x65\x45\x1a\x04\xea\x35\x6f\xe9\xe2\xd8\x4c\xb3\xe2\x79\x38\x63\xc4\x25\xea\xb6\x32\x96\x99\xb7\x61\xf1\x0a\xcd\xc2\x7d\x36\xdf\xd5\xfc\x22\x9e\x47\x95\xf4\xaa\xc7\x73\x7a\x51\x83\x41\xff\x90\x6f\x1d\x3f\x7d\x30\x4d\x73\x5d\xf4\xa6\x83\x70\xbc\x21\xec\xd9\x98\xfb\x91\x94\x19\x4d\x8c\x28\x19\xc5\xb3\xa2\x6f\xbd\xdc\x51\xb7\x3a\xf4\x46\x13\x3b\xc0\xce\x41\x5f\xdb\x62\x06\xe9\xc9\xa9\xab\x60\x7f\x30\xa2\x73\x74\x49\xca\xd6\xee\xa5\xa9\xa7\x49\xb1\x4a\x7d\xd5\x90\xed\x58\x8d\xe3\x28\xb4\x1e\x3e\x53\x5c\xca\x6a\x53\xac\x5f\xf7\x65\x2d\x8f\x8a\x09\x10\x81\x1f\x8b\x42\x56\x75\x79\xdc\xbe\xde\x3a\x52\xcc\x8f\x22\x01\x50\x36\xfb\x5b\x62\x44\xba\x58\x45\x5d\x84\x8d\x2e\xc1\x1f\xbf\x6e\x9d\x94\xc7\x4a\x31\x81\xce\x34\xf8\x6b\xf4\xde\x01\xe0\xfd\xfe\x3b\x07\xfc\xa5\x83\x6e\x53\xcb\x72\x09\xb4\x39\x77\x20\xd1\x54\x4a\x0d\x9b\x22\xac\x3b\xaa\xc3\x84\xcb\x34\x82\x98\xe0\x0e\x72\xbe\x72\x18\xb8\x41\x4c\x60\xbf\xcd\xaf\xeb\xda\x9f\x4f\x77\x93\x7c\x22\xff\xdd\x0e\x50\xb6\x48\xd0\x12\x8a\x3e\x1d\x16\xfe\xec\x8a\x35\x34\x6a\xce\x32\x89\xbd\x64\x40\x27\xa5\xd6\xc4\x7e\x2e\x72\x28\x9c\xd9\xfc\x6e\x57\xc2\x5e\xa4\x8e\x4a\x78\xd1\x26\x46\x69\x47\xc4\xb2\xc2\x9b\x43\x59\x5b\x8b\x47\xcc\xd7\x8c\xfa\x39\x1c\x0e\xf9\xb2\xe6\xec\xec\x79\x4f\xad\xb7\xaa\xca\x86\x6b\x49\x34\xde\xd1\xb8\xf6\xb9\x31\xbc\x0c\x0f\xab\x06\xf2\xa9\x9d\xd6\xed\x7c\xdc\xf4\xe5\xf4\xc5\xd1\xd7\x8c\x5c\xf9\xdb\x53\xd1\x04\xbb\xa7\x93\x9a\xbd\x65\xa1\x3d\x12\xa1\xf3\xad\x03\xfd\x7b\x07\x84\xbb\x88\x6a\x5d\x84\xd0\x1f\x20\x3a\xff\xff\x0c\x00\x00\xff\xff\x11\x17\x53\x49\x13\x03\x00\x00")

func testnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_testnetDelegatesJson,
		"testnet/delegates.json",
	)
}

func testnetDelegatesJson() (*asset, error) {
	bytes, err := testnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testnet/delegates.json", size: 787, mode: os.FileMode(420), modTime: time.Unix(1641257608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\xcb\x6e\x9b\x40\x14\x06\xe0\xbd\x9f\x62\xc4\x96\xd4\x99\x19\x06\x66\x8c\x94\x05\xc3\xcd\x4e\x7c\xbf\x84\xd8\x55\x15\x61\xc0\x06\x73\x0d\xe0\x00\xad\xf2\xee\x15\x6d\xb2\x4b\x54\x75\x7b\x8e\xce\x91\xfe\xff\xfb\x3e\x00\xe0\xd7\x00\x00\x00\x84\xcc\x4d\x03\x41\x05\x42\xea\x46\xd9\x37\x88\x84\x9b\xbf\x63\xd7\xf7\xcb\xa0\xaa\xfa\x0d\x6c\x35\x5d\x93\x19\x43\x50\xc1\x16\xc2\x0a\x97\x0c\x9d\x1a\x48\xd3\x31\xd3\x89\x31\x22\x1c\x2b\x23\x4a\x75\x88\xac\x8f\xe3\xe2\x7a\x7c\x8e\x83\xae\x3f\xe6\x4b\x6e\xed\xc7\x52\x27\xee\xa4\x75\xb9\x99\x3b\xc7\xe6\xa5\xcd\xbb\x00\x3f\x99\xb5\x8e\x0f\x0f\xdb\x90\x5d\xbd\xae\x59\xad\xd8\xf5\x71\xb9\x0b\x93\x94\xe6\x45\x18\xfa\x10\xb5\xfc\x1c\xdb\xfc\x3e\xd9\xc0\x89\x1f\x9f\x1f\x65\x9a\xef\x37\xcd\x32\xe8\xec\x75\x3c\x19\xcf\x66\x77\xaa\xaa\x26\xeb\xd4\xd4\x4b\xaf\x0b\xa2\xf6\xfe\xd2\xfa\xf1\x43\xc2\x0f\x8e\x39\xed\x2a\xed\x72\x94\x78\x8d\xe4\xec\xd6\xf6\xda\xeb\x34\xa5\x50\x11\xc3\x8b\x3c\x17\x67\xfe\xed\x32\xc4\xcd\xee\x50\x14\xb4\x36\x34\x77\x7b\x3a\x5b\xc7\x60\xe5\x55\xe6\xd8\xd9\xda\xa3\x45\x32\x87\x8d\x79\xf7\x91\xe2\x35\xaf\xa3\xec\xfc\x5c\xe4\x4d\x50\x0a\x2a\x40\x08\xbe\x2f\xb2\xa0\x6e\xf2\x32\x7e\xee\x3b\x12\xd4\xf7\x22\x01\x10\xa2\xa2\x4f\x8c\xa4\x21\x46\x64\x28\x2b\x43\xa4\xd0\xf7\x5f\x7d\x27\x79\x59\x0b\x2a\x60\x0a\x85\x7f\x46\x6f\x03\x00\xde\x6e\xbe\x72\xc0\x9f\x3a\x30\x4e\x34\xcd\x92\x20\xd7\x75\x13\x4a\x54\x26\x64\xc4\x09\xc2\xcc\x94\x4d\xc5\xb0\x14\x2a\x21\xc5\xd0\x4d\x64\x7e\xe6\xc0\x1d\x71\xe2\xcc\x4f\x8f\xa2\xdc\xae\xea\x24\x9a\x30\xb3\xf0\xa5\x66\xc6\x08\xf7\xae\xf8\x69\xfd\xb2\x48\xa6\xde\x58\x13\x9b\x2e\xb1\x9d\x43\xbe\x8b\x9e\xf6\x47\x3e\x59\xac\x9b\x5a\xe7\x2b\xc3\x99\xa6\x2b\x82\x3c\x67\xc7\x72\xbf\x79\xad\xf9\x89\x1e\xa7\xb1\x93\x93\xaa\x77\xd8\x8e\x6f\xed\x97\xba\xf4\x72\xf1\xa7\xe7\x47\x26\x1d\x7b\xd8\x3b\x24\x28\xde\x57\x28\x5f\x96\x27\xcd\x21\x2e\x69\xed\xf4\x94\xcd\x64\xfe\x30\xbb\x18\x0a\xaa\x8d\x6c\x5d\xb0\x9d\x13\x9d\x33\x42\xaa\x7d\x44\x1a\x77\x14\x3b\x9e\xee\x86\xaf\xd6\x62\x23\x42\x7b\x63\x9d\xb5\x2f\x1d\xf0\x7f\x39\x20\x8c\x86\x88\x29\xff\x80\x18\xfc\xf8\x1d\x00\x00\xff\xff\xfc\xa0\x7e\x84\x13\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 787, mode: os.FileMode(420), modTime: time.Unix(1641187721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testnet/delegates.json": testnetDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"testnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{testnetDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

